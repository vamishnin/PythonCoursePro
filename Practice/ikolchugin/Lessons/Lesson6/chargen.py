
# Циклически генерирует последовательность значений 0-9,
# по достижении 9 снова начинается генерация последовательности 0-9 и т.д.
# т.е. получается генератор бесконечной последовательности.
# аналог itertools.cycle('0123456789')
def chargen():
    # i = 0     # добавил для наглядности при генерации спискового выражения
    while True:
        for c in '0123456789':
            # print(i, c)  # добавил для наглядности при генерации спискового выражения
            yield c
            # i += 1        # добавил для наглядности при генерации спискового выражения




# списковое выражение [c + c for c in chargen()] никогда не будет завершено коррректно, т.к. бесконечный генератор.
# words = [c + c for c in chargen()][:10]
# print(words)


# Можно использовать генератор для 10 значений
def chargen_n1():
    for c in '0123456789':
        yield c


words1 = [c + c for c in chargen_n1()]
print(words1)


# или же взять бесконечный генератор за основу и использовать только n раз
def chargen_n2(n):
    c = chargen()
    for _ in range(n):
        ret = next(c)
        yield ret


words2 = [c + c for c in chargen_n2(20)]
print(words2)
